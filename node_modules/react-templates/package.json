{
  "name": "react-templates",
  "version": "0.1.14",
  "description": "Light weight templates for react -> write html get valid react code",
  "main": "./src/cli.js",
  "bin": {
    "rt": "./bin/rt.js"
  },
  "scripts": {
    "test": "node test/src/test.js",
    "test-cov": "istanbul cover test/src/test.js -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wix/react-templates.git"
  },
  "author": {
    "name": "Avi Marcus"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/wix/react-templates/issues"
  },
  "homepage": "https://github.com/wix/react-templates",
  "dependencies": {
    "chalk": "^1.0.0",
    "cheerio": "^0.18.0",
    "escodegen": "^1.6.1",
    "esprima-harmony": "^7001.1.0-dev-harmony-fb",
    "lodash": "^3.3.0",
    "optionator": "^0.5.0",
    "text-table": "^0.2.0"
  },
  "devDependencies": {
    "brace": "^0.4.1",
    "brfs": "^1.4.0",
    "coveralls": "^2.11.2",
    "grunt": "^0.4.5",
    "grunt-browserify": "^3.4.0",
    "grunt-contrib-requirejs": "^0.4.4",
    "grunt-contrib-uglify": "^0.7.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-eslint": "^7.0.0",
    "grunt-node-tap": "^0.1.61",
    "istanbul": "^0.3.6",
    "react": "^0.12.2",
    "tape": "^3.5.0"
  },
  "keywords": [
    "templates",
    "react-templates",
    "react",
    "reactjs",
    "react.js",
    "react-component",
    "react component"
  ],
  "readme": "[![NPM version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\n# React Templates\n\nLightweight templates for [React](http://facebook.github.io/react/index.html). \n\n* No runtime libraries. No magic. Simply precompile your way to clear React code.\n* Easy syntax that's similar to HTML, supported by most IDEs.\n* Clear separation of presentation and logic - almost zero HTML in component files.\n* Declarative coding ensures that the HTML that you write and the HTML you inspect look nearly identical.\n* Supports AMD, CommonJS, ES6, Typescript and globals.\n\n## How does it work\nReact Templates compiles an *.rt file (react template file - an extended HTML format) into a JavaScript file. This file, which uses AMD syntax, returns a function. When invoked, this function returns a virtual React DOM based on React.DOM elements and custom user components. \n<p>A common use case would be that a regular React component would require a JavaScript file generated from a template, and then perform `func.apply(this)`, causing the template to have that component as its context.\n\n## Playground\nhttp://wix.github.io/react-templates/\n\n## Yeoman generator\nhttps://github.com/wix/generator-react-templates\n\n## Hello react-templates\nHere's a sample Hello project:<br/>\nhttps://github.com/wix/hello-react-templates\n\n## IntelliJ / WebStorm plugin\nhttp://plugins.jetbrains.com/plugin/7648\n\n\n###### Basic concepts for React templates\n* Any valid HTML (including comments) is a template \n* {} to identify JS expression\n* Built-in directives:\n    * [rt-if](#rt-if)\n    * [rt-repeat](#rt-repeat)\n    * [rt-scope](#rt-scope)\n    * [rt-props](#rt-props)\n    * [rt-class](#rt-class)\n    * [rt-require](#rt-require)\n* [styles](#styles)\n* [event handlers](#event-handlers)\n\n###### Why not use JSX?\nSome love JSX, some don't. We don't. More specifically, it seems to us that JSX is only a good fit for components with very little HTML inside. And this can be accomplished by creating DOM elements in code. Also, we like to separate code and HTML because it just feels right.\n\n## Installation\nYou can install react-templates using npm:\n```shell\nnpm install react-templates -g\n```\n\n## Usage\n```shell\nrt [file.rt|dir]* [options]\n```\n\nSee more on CLI usage [here](https://github.com/wix/react-templates/blob/gh-pages/docs/cli.md).\n\nIn most cases, this package will be wrapped in a build task, so CLI will not be used explicitly:\n* Grunt: [grunt-react-templates](https://github.com/wix/grunt-react-templates)\n* Broccoli: [broccoli-react-templates](https://github.com/kraftwer1/broccoli-react-templates)\n\n# Template directives and syntax\n\n## Any valid HTML is a template\nAny HTML that you write is a valid template, except for inline event handlers (\"on\" attributes). See the \"event handlers\" section below for more information.\n\n## {} to identify JavaScript expressions\nTo embed JavaScript expressions in both attribute values and tag content, encapsulate them in {}. If this is done inside an attribute value, the value still needs to be wrapped in quotes. For directives (see below), {} are not used.\n\n###### Sample:\n```html\n<a href=\"{this.state.linkRef}\">{this.state.linkText}</a>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    return function () {\n        return React.DOM.a({ 'href': this.state.linkRef }, this.state.linkText);\n    };\n});\n```\n\n## rt-if\nThis lets you add conditions to a subtree of HTML. If the condition evaluates to true, the subtree will be returned; otherwise, it will not be calculated. It is implemented as a ternary expression.\n\n\n###### Sample:\n```html\n<div rt-if=\"this.state.resultCode === 200\">Success!</div>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    return function () {\n        return this.state.resultCode === 200 ? React.DOM.div({}, 'Success!') : null;\n    };\n});\n```\n\n## rt-repeat\nRepeats a DOM node with its subtree for each item in an array. The syntax is `rt-repeat=\"itemVar in arrayExpr\"`, where the element, `itemVar`, will be available in JavaScript context, and an `itemVarIndex` will be created to represent the index of the item. By using this naming scheme, repeated expressions have access to all levels of nesting.\n\n###### Sample:\n```html\n<div rt-repeat=\"myNum in this.getMyNumbers()\">{myNumIndex}. {myNum}</div>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    function repeatMyNum1(myNum, myNumIndex) {\n        return React.DOM.div({}, myNumIndex + '. ' + myNum);\n    }\n    return function () {\n        return _.map(this.getMyNumbers(), repeatMyNum1.bind(this));\n    };\n});\n```\n\n## rt-scope\nThis directive creates a new JavaScript scope by creating a new method and invoking it with its current context. The syntax is `rt-scope=\"expr1 as var1; expr2 as var2`. This allows for a convenient shorthand to make the code more readable. It also helps to execute an expression only once per scope.\n\n###### Sample:\n```html\n<div rt-repeat=\"rpt in array\">\n    <div rt-scope=\"')' as separator; rpt.val as val\">{rptIndex}{separator} {val}</div>\n    <div>'rpt' exists here, but not 'separator' and 'val'</div>\n</div>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    function scopeSeparatorVal1(rpt, rptIndex, separator, val) {\n        return React.DOM.div({}, rptIndex + separator + ' ' + val);\n    }\n    function repeatRpt2(rpt, rptIndex) {\n        return React.DOM.div({}, scopeSeparatorVal1.apply(this, [\n            rpt,\n            rptIndex,\n            ')',\n            rpt.val\n        ]), React.DOM.div({}, '\\'rpt\\' exists here, but not \\'separator\\' and \\'val\\''));\n    }\n    return function () {\n        return _.map(array, repeatRpt2.bind(this));\n    };\n});\n```\n\n## rt-props\nrt-props is used to inject properties into an element programmatically. It will merge the properties with the properties received in the template. This option allows you to build properties based on external logic and pass them to the template. It is also useful when passing properties set on the component to an element within the template. The expected value of this attribute is an expression returning an object. The keys will be the property name, and the values will be the property values.\n\n###### Sample:\n```html\n<input style=\"height:10px;width:3px;\" rt-props=\"{style:{width:'5px'},type:'text'}\"/>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    return function () {\n        return React.DOM.input(_.merge({}, {\n            'style': {\n                height: '10px',\n                width: '3px'\n            }\n        }, {\n            style: { width: '5px' },\n            type: 'text'\n        }));\n    };\n});\n```\n\n## rt-class\nTo reduce the boilerplate code when setting class names programatically, you can use the rt-class directive. It expects a JSON object with keys as class names, and a Boolean as the value. If the value is true, the class name will be included.\n\n<p>Note the following:<br/>\n1. In React templates, you can use the \"class\" attribute as you would in HTML. <br/>\n2. You cannot use class and rt-class on the same HTML element.\n\n###### Sample:\n```html\n<div rt-scope=\"{blue: true, selected: this.isSelected()} as classes\">\n    These are logically equivalent\n    <div rt-class=\"classes\">Reference</div>\n    <div rt-class=\"{blue: true, selected: this.isSelected()}\">Inline</div>\n    <div class=\"blue{this.isSelected() ? ' selected' : ''}\">Using the class attribute</div>\n</div>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    function scopeClasses1(classes) {\n        return React.DOM.div({}, 'These are logically equivalent', React.DOM.div({ 'className': React.addons.classSet(classes) }, 'Reference'), React.DOM.div({\n            'className': React.addons.classSet({\n                blue: true,\n                selected: this.isSelected()\n            })\n        }, 'Inline'), React.DOM.div({ 'className': 'blue' + this.isSelected() ? ' selected' : '' }, 'Using the class attribute'));\n    }\n    return function () {\n        return scopeClasses1.apply(this, [{\n                blue: true,\n                selected: this.isSelected()\n            }]);\n    };\n});\n```\n\n## style\nReact templates allow the settings of styles inline in HTML, optionally returning an object from the evaluation context. By default, style names will be converted from hyphen-style to camelCase-style naming. \n\nTo embed JavaScript inside a style attribute, single curly braces are used. To embed an entire object, double curly braces are used. *Note*: When embedding objects, styles must conform to camelCase-style naming.\n\n###### Sample:\n```html\n<div>\n    These are really equivalent\n    <div style=\"color:white; line-height:{this.state.lineHeight}px\">Inline</div>\n    <div style=\"{{'color': 'white', 'lineHeight': this.state.lineHeight + 'px'}}\">Inline</div>\n</div>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    return function () {\n        return React.DOM.div({}, 'These are really equivalent', React.DOM.div({\n            'style': {\n                color: 'white',\n                lineHeight: this.state.lineHeight + 'px'\n            }\n        }, 'Inline'), React.DOM.div({\n            'style': {\n                'color': 'white',\n                'lineHeight': this.state.lineHeight + 'px'\n            }\n        }, 'Inline'));\n    };\n});\n```\n\n## event handlers\nReact event handlers accept function references inside of {}, such as `onClick=\"{this.myClickHandler}\"`. When functions are not needed, lambda notation can be used, which will create a React template that creates a function for the included code. There is no performance impact, as the function created is bound to the context instead of being recreated. \n<p>The lambda notation has the form: `onClick=\"(evt) => console.log(evt)\"`. In this example, **evt** is the name of the first argument passed into the inline function. With browser events, this will most likely be the React synthetic event. However, if you expect a property that starts with **on**Something, then React templates will treat it as an event handler. If you have an event handler called **onBoxSelected** that triggers an event with row and column params, you can write `onBoxSelected=\"(row, col)=>this.doSomething(row,col)\"`. A no-param version is supported as well: `onClick=\"()=>console.log('just wanted to know it clicked')\"`.\n\n###### Sample:\n```html\n<div rt-repeat=\"item in items\">\n    <div onClick=\"()=>this.itemSelected(item)\" onMouseDown=\"{this.mouseDownHandler}\">\n</div>\n```\n###### Compiled:\n```javascript\ndefine([\n    'react',\n    'lodash'\n], function (React, _) {\n    'use strict';\n    function onClick1(item, itemIndex) {\n        this.itemSelected(item);\n    }\n    function repeatItem2(item, itemIndex) {\n        return React.DOM.div({}, React.DOM.div({\n            'onClick': onClick1.bind(this, item, itemIndex),\n            'onMouseDown': this.mouseDownHandler\n        }));\n    }\n    return function () {\n        return _.map(items, repeatItem2.bind(this));\n    };\n});\n```\n\n## rt-require, and using other components in the template\nIn many cases, you'd like to use either external code or other components within your template. An **rt-require** tag lets you include dependencies: `<rt-require dependency=\"depVarPath\" as=\"depVarName\"/>`. Once included, **depVarName** will be in scope. You can only use rt-require tags at the beginning of your template. When including React components, they can be referred to by their tag name inside a template. For example, `<MySlider prop1=\"val1\" onMyChange=\"{this.onSliderMoved}\">`. Nesting is also supported: `<MyContainer><div>child</div><div>another</div></MyContainer>`. Children are accessible from **this.props.children**.\n\n###### Sample:\n```html\n<rt-require dependency=\"comps/myComp\" as=\"MyComp\"/>\n<rt-require dependency=\"utils/utils\" as=\"utils\"/>\n<MyComp rt-repeat=\"item in items\">\n    <div>{utils.toLower(item.name)}</div>\n</MyComp>\n```\n###### Compiled (AMD):\n```javascript\ndefine([\n    'react/addons',\n    'lodash',\n    'comps/myComp',\n    'utils/utils'\n], function (React, _, MyComp, utils) {\n    'use strict';\n    function repeatItem1(item, itemIndex) {\n        return React.createElement(MyComp, {}, React.createElement('div', {}, utils.toLower(item.name)));\n    }\n    return function () {\n        return _.map(items, repeatItem1.bind(this));\n    };\n});\n```\n###### Compiled (with CommonJS flag):\n```javascript\nvar React = require('react/addons');\nvar _ = require('lodash');\nvar MyComp = require('comps/myComp');\nvar utils = require('utils/utils');\n'use strict';\nfunction repeatItem1(item, itemIndex) {\n    return React.createElement(MyComp, {}, React.createElement('div', {}, utils.toLower(item.name)));\n}\nmodule.exports = function () {\n    return _.map(items, repeatItem1.bind(this));\n};\n```\n###### Compiled (with ES6 flag):\n```javascript\nimport { React } from 'react/addons';\nimport { _ } from 'lodash';\nimport { MyComp } from 'comps/myComp';\nimport { utils } from 'utils/utils';\n\nfunction repeatItem1(item, itemIndex) {\n    return React.createElement(MyComp, {}, React.createElement('div', {}, utils.toLower(item.name)));\n}\nexport default function () {\n    return _.map(items, repeatItem1.bind(this));\n};\n```\n\n## License\nCopyright (c) 2014 Wix. Licensed under the MIT license.\n\n[npm-image]: https://img.shields.io/npm/v/react-templates.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/react-templates\n[travis-image]: https://img.shields.io/travis/wix/react-templates/gh-pages.svg?style=flat-square\n[travis-url]: https://travis-ci.org/wix/react-templates\n[coveralls-image]: https://img.shields.io/coveralls/wix/react-templates/gh-pages.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/wix/react-templates?branch=gh-pages\n[downloads-image]: http://img.shields.io/npm/dm/react-templates.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/react-templates\n",
  "readmeFilename": "README.md",
  "_id": "react-templates@0.1.14",
  "_from": "react-templates@"
}
